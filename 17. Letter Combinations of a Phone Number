Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

'''java
import java.util.ArrayList;
import java.util.List;

class Solution {
    // Mapping of digits to corresponding letters.
    private static final String[] KEYPAD = {
        "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
    };

    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        
        // Return empty list if input is empty
        if (digits == null || digits.length() == 0) {
            return result;
        }
        
        // Start backtracking
        backtrack(result, new StringBuilder(), digits, 0);
        
        return result;
    }

    // Helper method for backtracking
    private void backtrack(List<String> result, StringBuilder current, String digits, int index) {
        // If the current combination is the same length as digits, add it to the result
        if (index == digits.length()) {
            result.add(current.toString());
            return;
        }

        // Get the letters that the current digit maps to
        String letters = KEYPAD[digits.charAt(index) - '0'];
        
        // Loop through all letters for the current digit
        for (char c : letters.toCharArray()) {
            current.append(c);
            backtrack(result, current, digits, index + 1);
            current.deleteCharAt(current.length() - 1); // Backtrack by removing the last character
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        String digits1 = "23";
        System.out.println(solution.letterCombinations(digits1)); // Output: [ad, ae, af, bd, be, bf, cd, ce, cf]
        
        // Example 2
        String digits2 = "";
        System.out.println(solution.letterCombinations(digits2)); // Output: []

        // Example 3
        String digits3 = "2";
        System.out.println(solution.letterCombinations(digits3)); // Output: [a, b, c]
    }
}
'''java
